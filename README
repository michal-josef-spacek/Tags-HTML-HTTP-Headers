NAME
    Tags::HTML::HTTP::Headers - Tags helper for gradient evaluation.

SYNOPSIS
     use Tags::HTML::HTTP::Headers;

     my $obj = Tags::HTML::HTTP::Headers->new(%params);
     $obj->cleanup;
     $obj->init($headers);
     $obj->process;
     $obj->process_css;

METHODS
  "new"
     my $obj = Tags::HTML::HTTP::Headers->new(%params);

    Constructor.

    *       "css"

            'CSS::Struct::Output' object for process_css processing.

            It's required.

            Default value is undef.

    *       "tags"

            'Tags::Output' object.

            Default value is undef.

    Returns instance of object.

  "cleanup"
     $obj->cleanup;

    Process cleanup after page run.

    In this case cleanup internal representation of a set by init.

    Returns undef.

  "init"
     $obj->init($headers);

    Process initialization in page run.

    Accepted $headers is HTTP::Headers object.

    There is difference in "flatten()" method of HTTP::Headers and
    "psgi_flatten()" method of HTTP::Headers::Fast. Second one is accepted
    too.

    Returns undef.

  "process"
     $obj->process;

    Process Tags structure for HTTP headers.

    Returns undef.

  "process_css"
     $obj->process_css;

    Process CSS::Struct structure for output.

    Returns undef.

ERRORS
     new():
             From Class::Utils::set_params():
                     Unknown parameter '%s'.
             Parameter 'css' must be a 'CSS::Struct::Output::*' class.
             Parameter 'tags' must be a 'Tags::Output::*' class.

EXAMPLE
     use strict;
     use warnings;

     use CSS::Struct::Output::Indent;
     use HTTP::Headers;
     use Tags::HTML::HTTP::Headers;
     use Tags::Output::Indent;

     # Object.
     my $css = CSS::Struct::Output::Indent->new;
     my $tags = Tags::Output::Indent->new;
     my $obj = Tags::HTML::HTTP::Headers->new(
             'css' => $css,
             'tags' => $tags,
     );

     # Example Header.
     my $headers = HTTP::Headers->new(
             'Host' => 'example.com',
             'Content-Type' => 'text/plain',
     );

     # Init.
     $obj->init($headers);

     # Process HTTP::Headers.
     $obj->process_css;
     $obj->process;

     # Print out.
     print "CSS\n";
     print $css->flush."\n";
     print "HTML\n";
     print $tags->flush."\n";

     # Output:
     # CSS
     # .headers {
     #         margin: 1em;
     #         padding: 1em;
     #         border-radius: 8px;
     #         box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
     #         background-color: #f4f4f4;
     # }
     # HTML
     # <div class="headers">
     #   <span style="color: chartreuse;">
     #     Host
     #   </span>
     #   :
     #   <span>
     #     example.com
     #   </span>
     #   <br>
     #   </br>
     #   <span style="color: turquoise;">
     #     Content-Type
     #   </span>
     #   :
     #   <span>
     #     text/plain
     #   </span>
     # </div>

DEPENDENCIES
    Class::Utils, Error::Pure. List::Util, Readonly, Scalar::Util,
    Tags::HTML.

REPOSITORY
    <https://github.com/michal-josef-spacek/Tags-HTML-HTTP-Headers>

AUTHOR
    Michal Josef Špaček <mailto:skim@cpan.org>

    <http://skim.cz>

LICENSE AND COPYRIGHT
    © 2024 Michal Josef Špaček

    BSD 2-Clause License

VERSION
    0.01

